"use babel";

import SummaryColumn from "../../lib/columns/summary-column";
import SearchMatch from "../../lib/search-match";

describe("columns/summary-column", function() {
  let column;

  beforeEach(function() {
    column = new SummaryColumn({ sortField: "name" });
  });

  describe(".sortField", function() {
    it("should return given sort field value", function() {
      expect(column.sortField).toEqual("name");
    });
  });

  describe(".cellContent", function() {
    let note, path;

    beforeEach(function() {
      path = "/notes/markdown.md";
      note = {
        id: "",
        name: "markdown",
        ext: ".md",
        content: "# testing markdown\nshould be **Zzz** by now tho"
      };
    });

    describe("when there is no query applied", function() {
      let cellContent;

      beforeEach(function() {
        cellContent = column.cellContent({ note: note, path: path });
      });

      it("should return a kind of AST from which a DOM can be created", function() {
        expect(cellContent).toEqual(jasmine.any(Array));
        expect(cellContent[0]).toEqual("markdown", "title");
        expect(cellContent[1]).toEqual({
          attrs: { className: "text-subtle" },
          content: ".md"
        });
        expect(cellContent[2]).toEqual(
          jasmine.any(String),
          "should be a separator between title and note content preview"
        );
        expect(cellContent[3]).toEqual(
          jasmine.any(Object),
          "note content preview"
        );
        expect(cellContent[3].attrs).toEqual(jasmine.any(Object));
        expect(cellContent[3].content).toEqual(jasmine.any(String));
      });
    });

    describe("when there is a search query", function() {
      let cellContent;

      it("should provide what parts of title and note content preview that should be highlighted", function() {
        // Match in the middle
        cellContent = column.cellContent({
          note: note,
          path: path,
          searchMatch: new SearchMatch(
            /[kƘƙꝀꝁḰḱǨǩḲḳḴḵκϰ₭][dĎďḊḋḐḑḌḍḒḓḎḏĐđD̦d̦ƉɖƊɗƋƌᵭᶁᶑȡᴅＤｄð]/i
          )
        }); // as generated by sifter.js
        expect(cellContent).toEqual(jasmine.any(Array));
        expect(cellContent[0]).toEqual(
          jasmine.any(Array),
          "title w/ highlight"
        );
        expect(cellContent[0]).toEqual([
          "mar",
          { attrs: { className: "text-highlight" }, content: "kd" },
          "own"
        ]);
        expect(cellContent[1]).toEqual({
          attrs: { className: "text-subtle" },
          content: ".md"
        });
        expect(cellContent[2]).toEqual(" - ");
        expect(cellContent[3].content).toEqual([
          "# testing mar",
          { attrs: { className: "text-highlight" }, content: "kd" },
          "own\nshould be **Zzz** by now tho"
        ]);

        // Match at beginning of string
        cellContent = column.cellContent({
          note: note,
          path: path,
          searchMatch: new SearchMatch(/m[aḀḁĂăÂâǍǎȺⱥȦȧẠạÄäÀàÁáĀāÃãÅåąĄÃąĄ]/i)
        });
        expect(cellContent[0]).toEqual([
          "",
          { attrs: { className: "text-highlight" }, content: "ma" },
          "rkdown"
        ]);
        expect(cellContent[1]).toEqual({
          attrs: { className: "text-subtle" },
          content: ".md"
        });

        // Match at end of string
        cellContent = column.cellContent({
          note: note,
          path: path,
          searchMatch: new SearchMatch(
            /[wẂẃẀẁŴŵẄẅẆẇẈẉ][nŃńǸǹŇňÑñṄṅŅņṆṇṊṋṈṉN̈n̈ƝɲȠƞᵰᶇɳȵɴＮｎŊŋ]/i
          )
        });
        expect(cellContent[0]).toEqual([
          "markdo",
          { attrs: { className: "text-highlight" }, content: "wn" },
          ""
        ]);
        expect(cellContent[1]).toEqual({
          attrs: { className: "text-subtle" },
          content: ".md"
        });

        // No match
        cellContent = column.cellContent({
          note: note,
          path: path,
          searchMatch: new SearchMatch(/Zzz/i)
        });
        expect(cellContent[0]).toEqual("markdown");
        expect(cellContent[1]).toEqual(
          { attrs: { className: "text-subtle" }, content: ".md" },
          "match of end should only contain rest+end"
        );
        expect(cellContent[3].content).toEqual([
          "…arkdown\nshould be **",
          { attrs: { className: "text-highlight" }, content: "Zzz" },
          "** by now tho"
        ]);
      });
    });
  });
});
